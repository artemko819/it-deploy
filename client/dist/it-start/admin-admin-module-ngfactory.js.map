{"version":3,"sources":["./src/app/admin/admin.module.ts","./src/app/admin/shared/components/auth-layout/auth-layout.component.ts","./src/app/admin/shared/components/auth-layout/auth-layout.component.html","./src/app/admin/login-page/login-page.component.ts","./src/app/admin/login-page/login-page.component.html","./src/app/admin/shared/components/admin-layout/admin-layout.component.ts","./src/app/admin/shared/components/admin-layout/admin-layout.component.html","./src/app/admin/overview-page/overview-page.component.ts","./src/app/admin/overview-page/overview-page.component.html","./src/app/admin/consult-page/consult-page.component.ts","./src/app/admin/consult-page/consult-page.component.html","./src/app/admin/person-page/person-page.component.ts","./src/app/admin/person-page/person-page.component.html","./src/app/admin/shared/components/loader/loader.component.ts","./src/app/admin/shared/components/loader/loader.component.html","./src/app/admin/categories-page/categories-page.component.ts","./src/app/admin/categories-page/categories-page.component.html","./src/app/admin/categories-page/categories-form/positions-form/positions-form.component.ts","./src/app/admin/categories-page/categories-form/positions-form/positions-form.component.html","./src/app/admin/categories-page/categories-form/categories-form.component.ts","./src/app/admin/categories-page/categories-form/categories-form.component.html","./src/app/admin/shared/classes/auth.guard.ts"],"names":["AdminModule","AuthLayoutComponent","router","e","preventDefault","this","navigate","auth","route","aSub","unsubscribe","form","email","required","password","minLength","queryParams","subscribe","params","toast","disable","login","value","error","message","console","log","enable","AdminLayoutComponent","links","url","name","event","logout","consultService","fetch","person","consults","fetchSchool","schools","consult","stopPropagation","window","confirm","school","deleteSchool","response","idx","findIndex","p","_id","splice","delete","personService","persons","LoaderComponent","CategoriesPageComponent","categoriesService","categories$","positionService","positions","loading","positonId","modal","initModal","moladRef","cost","min","categoryId","destroy","positon","patchValue","open","updateTextInput","close","newPositon","category","completed","reset","update","position","create","push","isNew","imagePreview","pipe","switchMap","getById","of","imageSrc","inputRef","nativeElement","click","file","target","files","image","reader","FileReader","onload","result","readAsDataURL","obs$","err","state","isAuthenticated","accessDenied","canActivate"],"mappings":"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","file":"admin-admin-module-ngfactory.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { AdminLayoutComponent } from './shared/components/admin-layout/admin-layout.component';\nimport { LoginPageComponent } from './login-page/login-page.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AuthLayoutComponent } from './shared/components/auth-layout/auth-layout.component';\nimport { RegisterPageComponent } from './register-page/register-page.component';\nimport { AuthGuard } from './shared/classes/auth.guard';\nimport { OverviewPageComponent } from './overview-page/overview-page.component';\n\nimport { HistoryPageComponent } from './history-page/history-page.component';\nimport { CategoriesPageComponent } from './categories-page/categories-page.component';\nimport { LoaderComponent } from './shared/components/loader/loader.component';\nimport { CategoriesFormComponent } from './categories-page/categories-form/categories-form.component';\nimport { PositionsFormComponent } from './categories-page/categories-form/positions-form/positions-form.component';\nimport { PersonPageComponent } from './person-page/person-page.component';\nimport { ConsultPageComponent } from './consult-page/consult-page.component';\n\n@NgModule({\n  declarations: [\n        AdminLayoutComponent, \n        LoginPageComponent, \n        AuthLayoutComponent, \n        RegisterPageComponent, \n        OverviewPageComponent, \n        HistoryPageComponent, \n\n        CategoriesPageComponent, \n        LoaderComponent,\n        CategoriesFormComponent, \n        PositionsFormComponent,\n        PersonPageComponent,\n        ConsultPageComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule.forChild([\n      {\n        path: '', component: AuthLayoutComponent, children: [\n          { path: '', redirectTo: '/admin/login', pathMatch: 'full' },\n          { path: 'login', component: LoginPageComponent },\n          // { path: 'register', component: RegisterPageComponent },         \n        ]\n      },\n      {\n        path:'',component: AdminLayoutComponent,canActivate:[AuthGuard],children:[\n          { path: 'owerview', component: OverviewPageComponent },\n          { path: 'consult', component: ConsultPageComponent },\n          {path:\"person\", component:PersonPageComponent},\n          { path: 'categories', component: CategoriesPageComponent },\n          { path: 'categories/new', component: CategoriesFormComponent },\n          { path: 'categories/:id', component: CategoriesFormComponent },\n        ]\n      }\n\n    ])\n  ],\n  exports: [RouterModule]\n})\nexport class AdminModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-auth-layout',\n  templateUrl: './auth-layout.component.html',\n  styleUrls: ['./auth-layout.component.css']\n})\nexport class AuthLayoutComponent implements OnInit {\n\n  constructor(private router: Router) { }\n\n  ngOnInit(): void {\n  }\n  logout(e:Event){\n    e.preventDefault()\n    this.router.navigate(['/admin'])\n  }\n\n}\n","<nav class=\"green\">\n    <div class=\"nav-wrapper\">\n      <a routerLink=\"/\" class=\"brand-logo\">It Start</a>\n      <ul id=\"nav-mobile\" class=\"right\">\n        <li routerLinkActive=\"active\"><a [routerLink]=\"['/admin','login']\">Вход</a></li>\n        <!-- <li routerLinkActive=\"active\"><a  [routerLink]=\"['/admin','register']\"> Регистрация</a></li> -->\n      </ul>\n    </div>\n  </nav>\n  <div class=\"container\" id=\"admin\">\n      <router-outlet></router-outlet>\n  </div>","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { MaterialService } from '../shared/classes/material.service';\nimport { AuthService } from '../shared/services/auth.service';\n\n@Component({\n  selector: 'app-login-page',\n  templateUrl: './login-page.component.html',\n  styleUrls: ['./login-page.component.css']\n})\nexport class LoginPageComponent implements OnInit ,OnDestroy{\n  form: FormGroup\n  aSub: Subscription\n  constructor(private auth:AuthService,\n              private router:Router,\n              private route: ActivatedRoute\n    ) { }\n\n  ngOnDestroy(){\n    if(this.aSub){\n      this.aSub.unsubscribe()\n    }\n  }\n\n  ngOnInit(): void {\n    //validation\n    this.form = new FormGroup({ \n      email: new FormControl(null,[\n          Validators.email,\n          Validators.required]),\n      password: new FormControl(null,[\n        Validators.required,\n        Validators.minLength(6)\n      ])\n    })\n\n    this.route.queryParams.subscribe((params:Params)=>{\n      if(params['registered']){\n        // Теперь вы можите зайти в систему используя свои данные\n        MaterialService.toast('Теперь вы можите зайти в систему используя свои данные')\n      } else if(params['accessDenied']){\n        //для начала авторизуйтесь в системе\n        MaterialService.toast('для начала авторизуйтесь в системе')\n      }else if(params['sessionFailed']){\n        MaterialService.toast('Пожалуйста войдите в систему заново')\n      }\n    })\n\n  }\n\n  onSubmit(){\n    //form button disable\n    this.form.disable()\n    //go to login admin\n    this.aSub = this.auth.login(this.form.value).subscribe(\n      ()=> this.router.navigate(['/admin/owerview']),\n      error=>{\n        MaterialService.toast(error.error.message)\n        console.log(error)\n        this.form.enable()\n      }\n    )\n  }\n\n}\n","<form class=\"col s12  l12  card\" \n      id=\"login-form\"\n      [formGroup]='form'\n      (ngSubmit)=\"onSubmit()\"\n\n>\n    <h5 class=\"center green-text\">Войти в панель администратора</h5>\n    <div class=\"row\">\n        <div class=\"input-field col s12\">\n            <input id=\"email\" \n                   type=\"email\" \n                   class=\"validate\"\n                   formControlName=\"email\"\n                   >\n            <label for=\"email\">Email</label>\n            <span class=\"helper-text red-text\"\n                  *ngIf=\"form.get('email').invalid && form.get('email').touched\"        \n            >\n               <span *ngIf=\"form.get('email').errors['required']\">Е-mail не может быть пустым</span>\n               <span *ngIf=\"form.get('email').errors['email']\">Е-mail не коректный</span>\n            </span>\n          </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"input-field col s12\">\n            <input id=\"password\" \n                   type=\"password\" \n                   class=\"validate\"\n                   formControlName=\"password\"\n                   \n                   >\n            <label for=\"password\">Пароль</label>\n            <span class=\"helper-text red-text\"\n                  *ngIf=\"form.get('password').invalid && form.get('password').touched\"\n            >\n                  <span *ngIf=\"form.get('password').errors['required']\">Пароль не может быть пустым </span> \n                  <span *ngIf=\"form.get('password').errors['minlength']['requiredLength']\"> Введите больше символов</span>\n            </span>\n            \n          </div>\n    </div>\n    <button type=\"submit\"\n            class=\"btn green\"\n            [disabled]=\"form.invalid || form.disabled\"\n            >CONNECT</button>\n</form>","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../../services/auth.service';\n\n@Component({\n  selector: 'app-admin-layout',\n  templateUrl: './admin-layout.component.html',\n  styleUrls: ['./admin-layout.component.css']\n})\nexport class AdminLayoutComponent implements OnInit {\n  links= [\n    {url:\"/admin/owerview\",name:\"Oбзор\" },\n    {url:\"/admin/person\",name:\"Заявки на пробный урок\"},\n    {url:\"/admin/consult\",name:\"Заявки на курс\"},\n    {url:\"/admin/categories\",name:\"Города IT START\" }\n  ]\n  constructor(private router: Router,\n              private auth:AuthService\n    ) { }\n\n  ngOnInit(): void {\n  }\n\n  logout(event:Event){\n    event.preventDefault()\n    this.auth.logout()\n    this.router.navigate(['/admin/login'])\n  }\n  \n}\n","<ul class=\"sidenav sidenav-fixed a-sidenav\">\n    <h5>ADMIN PANEL</h5>\n    <li class=\"bold\" *ngFor=\"let link of links\"\n        routerLinkActive=\"active\"\n    >\n        <a [routerLink]=\"[link.url]\" class=\"waves-effect waves-orange\">\n           {{link.name}}\n        </a>\n    </li>\n\n    <li><a href=\"#\" (click)=\"logout($event)\">Выйти</a></li>\n</ul>\n<div class=\"container\" id=\"admin\">\n    <router-outlet></router-outlet>\n</div>\n\n\n<a id=\"menu\" class=\"waves-effect waves-light btn btn-floating\"><i class=\"material-icons\">info</i></a>\n\n<div class=\"tap-target\" data-target=\"menu\">\n    <div class=\"tap-target-content\">\n        <h5>Зачем нужна эта страница?</h5>\n        <p>Страница “Обзор” покажет динамику продаж за предыдущий день. Сравнение со средним значениями поможет вам понять, как идут дела у Вашего бизнеса.</p>\n    </div>\n</div>\n\n\n<!--Floating button-->\n<!-- <div class=\"fixed-action-btn\">\n    <a class=\"btn-floating btn-large red\">\n        <i class=\"large material-icons\">add</i>\n    </a>\n    <ul>\n        <li><a class=\"btn-floating green\"><i class=\"material-icons\">assignment</i></a></li>\n        <li><a class=\"btn-floating blue\"><i class=\"material-icons\">list</i></a></li>\n    </ul>\n</div> -->","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { QuizService } from 'src/app/quiz/quiz.service';\nimport { MaterialService } from '../shared/classes/material.service';\nimport { Test, TestSchool } from '../shared/interfaces';\n// import jsPDF from 'jspdf';\n// import pdfMake from 'pdfmake/build/pdfmake';\n// import pdfFonts from 'pdfmake/build/vfs_fonts';\n// pdfMake.vfs = pdfFonts.pdfMake.vfs;\n// import htmlToPdfmake from 'html-to-pdfmake';\n@Component({\n  selector: 'app-overview-page',\n  templateUrl: './overview-page.component.html',\n  styleUrls: ['./overview-page.component.css']\n})\nexport class OverviewPageComponent implements OnInit {\n\n  consults\n  schools\n  constructor(private consultService: QuizService) { }\n\n  ngOnInit(): void {\n    this.consultService.fetch().subscribe(person=>{\n      this.consults = person\n      console.log(this.consults)\n    })\n    this.consultService.fetchSchool().subscribe(person=>{\n      this.schools = person\n    })\n  }\n  onDeleteSchool(event:Event,consult: TestSchool){\n    event.stopPropagation()\n    const decision = window.confirm(`Удалить заявку \"${consult.school}\" ?`)\n    if(decision){\n      this.consultService.deleteSchool(consult).subscribe(\n        response=>{\n          const idx = this.consults.findIndex(p=> p._id === consult._id)\n          this.consults.splice(idx,1)\n          MaterialService.toast(response.message)\n        },\n        error=>{\n          MaterialService.toast(error.error.message)\n        }\n      )\n    }\n  }\n  onDeletePosition(event:Event,consult: Test) {\n    event.stopPropagation()\n    const decision = window.confirm(`Удалить заявку \"${consult.name}\" ?`)\n    if(decision){\n      this.consultService.delete(consult).subscribe(\n        response=>{\n          const idx = this.consults.findIndex(p=> p._id === consult._id)\n          this.consults.splice(idx,1)\n          MaterialService.toast(response.message)\n        },\n        error=>{\n          MaterialService.toast(error.error.message)\n        }\n      )\n    }\n  }\n\n\n\n}\n","<div class=\"container\">\n<h1>Города и школы </h1>\n<table>\n  <thead>\n    <tr>\n        <th>Количество начатих тестов</th>\n        <th>Школа</th>\n        <th>Город</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let school of schools;let i = index\">\n      <td>{{i+1}}</td>\n      <td>Школа№ : {{school.school}}</td>\n      \n      <td>Город : {{school.city}}   <i class=\"material-icons red-text\"\n        (click)=\"onDeleteSchool($event,school)\"\n     >delete</i></td>\n    </tr>   \n  </tbody>\n</table>\n<h1>Заявочки с теста</h1>\n<div class=\"collection\">\n  <div *ngFor=\"let consult of consults\" class=\"collection-item\">\n      <p>Имя ребенка: {{consult.name}}</p>\n      <p>Имя родителя: {{consult.name2}}</p>\n      <p>Email: {{consult.email}}</p>\n      <p>Школа№: {{consult.school}}</p>\n      <p>Телефон: {{consult.tel}}</p>\n      <p>Город: {{consult.city}}</p>\n      <p>Курс: {{consult.course}}</p>\n      <p>Дата: {{consult.date}}    \n      <i class=\"material-icons red-text\"\n          (click)=\"onDeletePosition($event,consult)\"\n       >delete</i>\n      </p>\n  </div>\n</div>\n\n</div>\n  ","import { Component, OnInit } from '@angular/core';\nimport { MaterialService } from '../shared/classes/material.service';\nimport { Consult } from '../shared/interfaces';\nimport { ConsultService } from '../shared/services/consult.service';\n\n@Component({\n  selector: 'app-consult-page',\n  templateUrl: './consult-page.component.html',\n  styleUrls: ['./consult-page.component.css']\n})\nexport class ConsultPageComponent implements OnInit {\n  consults\n  constructor(private consultService: ConsultService) { }\n\n  ngOnInit(): void {\n    this.consultService.fetch().subscribe(person=>{\n      this.consults = person\n      console.log(this.consults)\n    })\n  }\n  onDeletePosition(event:Event,consult: Consult) {\n    event.stopPropagation()\n    const decision = window.confirm(`Удалить заявку \"${consult.name}\" ?`)\n    if(decision){\n      this.consultService.delete(consult).subscribe(\n        response=>{\n          const idx = this.consults.findIndex(p=> p._id === consult._id)\n          this.consults.splice(idx,1)\n          MaterialService.toast(response.message)\n        },\n        error=>{\n          MaterialService.toast(error.error.message)\n        }\n      )\n    }\n  }\n\n\n}\n","<div class=\"collection\">\n    <div *ngFor=\"let consult of consults\" class=\"collection-item\">\n        <p>Имя: {{consult.name}}</p>\n        <p>Email: {{consult.email}}</p>\n        <p>Телефон: {{consult.tel}}</p>\n        <p>Город: {{consult.city}}</p>\n        <p>Курс: {{consult.course}}</p>\n        <p>Дата: {{consult.date}}    \n        <i class=\"material-icons red-text\"\n            (click)=\"onDeletePosition($event,consult)\"\n         >delete</i>\n        </p>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { MaterialService } from '../shared/classes/material.service';\nimport { Person } from '../shared/interfaces';\nimport { PersonService } from '../shared/services/person.service';\n\n@Component({\n  selector: 'app-person-page',\n  templateUrl: './person-page.component.html',\n  styleUrls: ['./person-page.component.css']\n})\nexport class PersonPageComponent implements OnInit {\n  persons\n  constructor(private personService:PersonService) { \n    \n  }\n\n  ngOnInit(): void {\n    this.personService.fetch().subscribe(person=>{\n      this.persons = person\n      console.log(this.persons)\n    })\n  }\n  onDeletePosition(event:Event,person: Person) {\n    event.stopPropagation()\n    const decision = window.confirm(`Удалить заявку \"${person.name}\" ?`)\n    if(decision){\n      this.personService.delete(person).subscribe(\n        response=>{\n          const idx = this.persons.findIndex(p=> p._id === person._id)\n          this.persons.splice(idx,1)\n          MaterialService.toast(response.message)\n        },\n        error=>{\n          MaterialService.toast(error.error.message)\n        }\n      )\n    }\n  }\n\n\n}\n","<div class=\"collection\">\n    <div *ngFor=\"let person of persons\" class=\"collection-item\">\n        <p>Имя: {{person.name}}</p>\n        <p>Email: {{person.email}}</p>\n        <p>Телефон: {{person.tel}}</p>\n        <p>Город: {{person.city}}</p>\n        <p>Курс: {{person.course}}</p>\n        <p>Дата: {{person.date}}    \n        <i class=\"material-icons red-text\"\n            (click)=\"onDeletePosition($event,person)\"\n         >delete</i>\n        </p>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-loader',\n  templateUrl: './loader.component.html',\n  styleUrls: ['./loader.component.css']\n})\nexport class LoaderComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"row\">\n    <div class=\"col s12 center\">\n        <div class=\"preloader-wrapper small active\">\n            <div class=\"spinner-layer spinner-green-only\">\n                <div class=\"circle-clipper left\">\n                    <div class=\"circle\"></div>\n                </div>\n                <div class=\"gap-patch\">\n                    <div class=\"circle\"></div>\n                </div>\n                <div class=\"circle-clipper right\">\n                    <div class=\"circle\"></div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Category } from '../shared/interfaces';\nimport { CategoriesService } from '../shared/services/categories.service';\n\n@Component({\n  selector: 'app-categories-page',\n  templateUrl: './categories-page.component.html',\n  styleUrls: ['./categories-page.component.css']\n})\nexport class CategoriesPageComponent implements OnInit {\n  \n  categories$:Observable<Category[]>\n  constructor(private categoriesService:CategoriesService) {\n\n   }\n \n  ngOnInit(): void {\n    this.categories$ =  this.categoriesService.fetch()\n    console.log(this.categories$)\n  }\n\n} \n","<main class=\"content\">\n    <div class=\"page-title\">\n        <h4>Города it start</h4>\n        <a id='add-btn' \n            class=\"waves-effect waves-light btn green darken-1\"\n            routerLink=\"/admin/categories/new\"\n            >Добавить город</a>\n    </div>\n\n    <div class=\"row\" \n        *ngIf=\"categories$ | async as categories;else loader\"\n    >\n        <div class=\"col s12\">\n            <div class=\"collection\" *ngIf=\"categories.length !==0; else empty\">\n                <a \n                    *ngFor=\"let category of categories\"\n                    [routerLink]=\"['/admin/categories',category._id]\"\n                    class=\"collection-item\"\n\n                >{{category.name}}</a>\n            </div>\n        </div>\n    </div>\n    <ng-template #empty>\n        <h3 class=\"center red-text\">Нет городов, нужно добавить !</h3>\n    </ng-template>\n    <ng-template #loader>\n        <app-loader></app-loader>\n    </ng-template>\n\n</main>","import { AfterViewInit, Component, ElementRef, Input, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { FormGroup, Validators, FormControl } from '@angular/forms';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { MaterialInstance, MaterialService } from 'src/app/admin/shared/classes/material.service';\nimport { Position } from 'src/app/admin/shared/interfaces';\nimport { PositionService } from 'src/app/admin/shared/services/position.service';\n\n@Component({\n  selector: 'app-positions-form',\n  templateUrl: './positions-form.component.html',\n  styleUrls: ['./positions-form.component.css']\n})\nexport class PositionsFormComponent implements OnInit, AfterViewInit, OnDestroy {\n  @Input('categoryId') categoryId: string //peredaem categorii\n  @ViewChild('modal') moladRef: ElementRef\n  positions: Position[] = []\n  loading = false\n  positonId = null\n  modal: MaterialInstance\n  form: FormGroup\n\n  constructor(private positionService: PositionService) { }\n\n  ngAfterViewInit() {\n    this.modal = MaterialService.initModal(this.moladRef)\n  }\n\n  ngOnInit(): void {\n    this.form = new FormGroup({\n      name: new FormControl(null, Validators.required),\n      cost: new FormControl(1, [Validators.required, Validators.min(1)])\n    })\n\n    this.loading = true\n    this.positionService.fetch(this.categoryId).subscribe(positions => {\n      this.positions = positions\n      this.loading = false\n    })//poluchaem pozicii po id categorii\n  }\n\n  ngOnDestroy() {\n    this.modal.destroy()\n  }\n\n  onSelectPosition(positon: Position) {\n    this.positonId = positon._id\n    this.form.patchValue({\n      name: positon.name,\n      cost: positon.cost\n    })\n    this.modal.open()\n    MaterialService.updateTextInput()\n  }\n  onDeletePosition(event:Event,positon: Position) {\n    event.stopPropagation()\n    const decision = window.confirm(`Удалить позицию \"${positon.name}\" ?`)\n    if(decision){\n      this.positionService.delete(positon).subscribe(\n        response=>{\n          const idx = this.positions.findIndex(p=> p._id === positon._id)\n          this.positions.splice(idx,1)\n          MaterialService.toast(response.message)\n        },\n        error=>{\n          MaterialService.toast(error.error.message)\n        }\n      )\n    }\n  }\n  onAddPosition() {\n    this.positonId = null\n    this.form.patchValue({\n      name: null,\n      cost: 1\n    })\n    this.modal.open()\n    MaterialService.updateTextInput()\n  }\n  closeModal() {\n    this.modal.close()\n  }\n\n\n  onSubmit() {\n    this.form.disable()\n    const newPositon: Position = {\n      name: this.form.value.name,\n      cost: this.form.value.cost,\n      category: this.categoryId\n    }\n    \n    const completed =  () => {\n      this.modal.close()\n      this.form.reset({ name: '', cost: 1 })\n      this.form.enable()\n    }\n    if (this.positonId) {\n      newPositon._id = this.positonId\n      this.positionService.update(newPositon).subscribe(\n        position => {\n          const idx = this.positions.findIndex(p=>p._id === position._id)\n          this.positions[idx] = position\n          MaterialService.toast(\"Изменения сохранены\")\n        },\n        error => {\n          MaterialService.toast(error.error.message)\n        },\n       completed\n      )\n    } else {\n\n      this.positionService.create(newPositon).subscribe(\n        position => {\n          MaterialService.toast(\"Курс добавлен\")\n          this.positions.push(position)\n        },\n        error => {\n          MaterialService.toast(error.error.message)\n        },\n        completed\n      )\n    }\n  }\n\n\n}\n","<div class=\"row\">\n    <div class=\"col s12\">\n        <div class=\"page-subtitle\">\n            <h4>Курсы:</h4>\n            <button class=\"waves-effect waves-light btn grey darken-1 btn-small modal-trigger\"\n                data-target=\"create-modal\" (click)=\"onAddPosition()\">\n                Добавить курс\n            </button>\n        </div>\n        <div *ngIf=\"!loading; else loader;\">\n            <div class=\"collection\" *ngIf=\"positions.length !==0; else empty;\">\n                <a *ngFor=\"let position of positions\" class=\"collection-item collection-item-icon\"\n                    (click)=\"onSelectPosition(position)\">\n                    <span>\n                        {{position.name}} <strong> {{position.cost}} грн.</strong>\n                    </span>\n                    <span>\n                        <i class=\"material-icons\"\n                           (click)=\"onDeletePosition($event,position)\"\n                        >delete</i>\n                    </span>\n                </a>\n            </div>\n            <ng-template #empty>\n                <div class=\"center\">\n                    <h4>В этом городе, пока что нет курсов!</h4>\n                </div>\n            </ng-template>\n        </div>\n        <ng-template #loader>\n            <app-loader></app-loader>\n        </ng-template>\n    </div>\n</div>\n<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n    <div class=\"modal\" #modal>\n        <div class=\"modal-content\">\n            <h4 class=\"mb1\">Добавить курс</h4>\n            <div class=\"input-field\">\n                <input id=\"pos-name\" \n                       type=\"text\"\n                       formControlName=\"name\"\n                       [ngClass]=\"{'invalid': form.get('name').invalid && form.get('name').touched}\"\n                       >\n                <label for=\"pos-name\">Название</label>\n                <span \n                    *ngIf=\"form.get('name').invalid && form.get('name').touched\"\n                    class=\"helper-text red-text\">\n                    Название не должно быть пустым !\n\n                </span>\n            </div>\n            <div class=\"input-field\">\n                <input \n                    id=\"pos-cost\" \n                    type=\"number\" \n                    min=\"1\"\n                    formControlName=\"cost\"\n                    [ngClass]=\"{'invalid': form.get('cost').invalid && form.get('cost').touched}\"\n                >\n                <label for=\"pos-cost\">Цена</label>\n                <span \n                *ngIf=\"form.get('cost').invalid && form.get('cost').touched\"\n                class=\"helper-text red-text\">\n                    Введите корректную цену\n                 </span>\n            </div>\n        </div>\n        <div class=\"modal-footer\">\n            <button type=\"button\"  \n                    class=\"modal-action btn waves-effect red \" \n                    (click)=\"closeModal()\"\n                    [disabled]=\"form.disabled\"\n                    >Отмена</button>\n            <button type=\"submit\" \n                    class=\"modal-action btn waves-effect\"\n                    [disabled]=\"form.disabled || form.invalid\"\n                    >Сохранить</button>\n        </div>\n    </div>\n</form>","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { MaterialService } from '../../shared/classes/material.service';\nimport { Category,Message } from '../../shared/interfaces';\nimport { CategoriesService } from '../../shared/services/categories.service';\n\n@Component({\n  selector: 'app-categories-form',\n  templateUrl: './categories-form.component.html',\n  styleUrls: ['./categories-form.component.css']\n})\nexport class CategoriesFormComponent implements OnInit {\n  @ViewChild('input') inputRef:ElementRef //получаем инпут в переменную\n  form:FormGroup\n  isNew =true\n  image: File\n  imagePreview= ''\n  category:Category\n  constructor(private route:ActivatedRoute,\n              private categoriesService:CategoriesService,\n              private router:Router\n    ) { }\n  \n  ngOnInit() {\n    this.form = new FormGroup({\n      name: new FormControl(null, Validators.required)\n    })\n\n    this.form.disable()\n\n    this.route.params\n      .pipe(\n        switchMap(\n          (params:Params)=>{//проверка редактирование или создание\n            if(params['id']){\n              this.isNew = false\n              return this.categoriesService.getById(params['id'])\n            }\n           return of(null)\n          }\n        )\n      )\n      .subscribe(\n          category=>{//если редартирование то в инпут название категории\n            if(category){\n              this.category = category\n              this.form.patchValue({//задаем значения инпута  \n                name: category.name\n              })\n              this.imagePreview = category.imageSrc//картинка\n              MaterialService.updateTextInput()\n            }\n            this.form.enable()\n          },\n          error => MaterialService.toast(error.error.message)\n      )\n  }\n  triggerClick(){\n    this.inputRef.nativeElement.click()//создаем события клика при загрузке картинки\n  }\n  onFileUpload(e:any){\n    const file = e.target.files[0];//first element img\n    this.image  = file\n    const reader = new FileReader()\n\n    reader.onload = ()=>{\n      this.imagePreview = reader.result as string;\n    }\n\n    reader.readAsDataURL(file)\n  } \n  deleteCategory(){//удаления\n    let obs$:Observable<any>\n    const decition = window.confirm(`Выуверены что хотите удалить город ${this.category.name}`)\n    if(decition){\n       obs$= this.categoriesService.delete(this.category._id)\n        obs$.subscribe(\n          response=> MaterialService.toast(response.message),\n          error=>MaterialService.toast(error.error.message),\n          ()=>{\n            this.router.navigate(['/admin/categories'])\n          }\n        )\n    }\n  }\n  onSubmit(){\n    let obs$:Observable<any>\n    this.form.disable()\n    if(this.isNew){\n        //create\n        obs$ = this.categoriesService.create(this.form.value.name,this.image)\n    }else{\n      //update\n      obs$ = this.categoriesService.update(this.category._id,this.form.value.name,this.image)\n    }\n    obs$.subscribe(\n      category =>{\n        this.category = category\n        MaterialService.toast('Изменения сохранены')\n        this.form.enable()\n      },\n      err =>{\n        MaterialService.toast(err.error.message)\n        this.form.enable()\n      }\n    )\n  }\n\n}\n","<main class=\"content\">\n    <div class=\"page-title\">\n        <h4>\n            <a [routerLink]=\"['/admin/categories']\">Города it start</a>\n            <i class=\"material-icons\">keyboard_arrow_right</i>\n           {{isNew ? 'Добавить' : 'Редактировать'}} город\n        </h4>\n        <span id=\"del\">\n            <button class=\"btn btn-small red\" (click)=\"deleteCategory()\">\n                <i class=\"material-icons\">delete</i>\n            </button>\n        </span>\n    </div>\n\n    <div class=\"row\">\n        <form class=\"col s12 l6\" [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"input-field\">\n                <input \n                       formControlName=\"name\"\n                       id=\"name\" \n                       type=\"text\"\n                       [ngClass]=\"{'invalid':form.get('name').invalid && form.get('name').touched}\"\n\n                >\n                <label for=\"name\">Название</label>\n                <span class=\"helper-text red-text\"\n                      *ngIf=\"form.get('name').invalid && form.get('name').touched\"\n                >\n                    <span *ngIf=\"form.get('name').errors['required']\">\n                        Название города не может быть пустым\n                    </span>\n                </span>\n            </div>\n\n            <div>\n                <input type=\"file\"\n                        class=\"dn\"\n                        (change)='onFileUpload($event)'\n                        #input\n                        \n                >\n                <button \n                    type=\"button\"\n                    (click)=\"triggerClick()\"\n                    [disabled]='form.disabled'\n                    class=\"waves-effect waves-light btn orange lighten-2 mb2\">\n                    <i class=\"material-icons left\">backup</i>\n                    Загрузить изображение\n                </button>\n            </div>\n\n            <div>\n                <button \n                    type=\"submit\"\n                    class=\"waves-effect waves-light btn\"\n                    [disabled]=\"form.invalid || form.disabled\"   \n                    >\n                    Сохранить изменения\n                </button>\n            </div>\n        </form>\n\n        <div class=\"col s12 l4 center\">\n            <img \n                class=\"responsive-img\" \n                [src]='imagePreview'\n                *ngIf=\"imagePreview\"\n                >\n        </div>\n    </div>\n\n   <app-positions-form\n   *ngIf=\"category?._id\"\n    [categoryId]=\"category._id\"\n   ></app-positions-form>\n\n\n</main>","import { Injectable } from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate,CanActivateChild, Router, RouterStateSnapshot} from '@angular/router'\nimport { Observable, of } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({\n    providedIn:'root'\n})\nexport class AuthGuard implements CanActivate, CanActivateChild{\n\n    constructor(private auth:AuthService,\n                private router: Router\n        ){\n\n    }\n\n    canActivate(route:ActivatedRouteSnapshot,state:RouterStateSnapshot):Observable<boolean>{\n        //proverka zaregan ili net polzovatel\n        if(this.auth.isAuthenticated()){\n            console.log(\"123\")\n            return of(true)\n        }else{\n            this.router.navigate(['admin/login'],{\n                queryParams:{\n                    accessDenied:true\n                }\n            })\n            return of(false)\n        }\n    }\n\n    canActivateChild(route:ActivatedRouteSnapshot,state:RouterStateSnapshot):Observable<boolean>{\n        return this.canActivate(route, state);\n    }\n}"],"sourceRoot":"webpack:///"}